name: CICD
on:
  push:
    branches: []
    tags: 'v*'
    paths:
      - 'src/**/*'
      - 'test/**/*'
      - '.github/action/**/*'
      - '.github/workflows/**/*'
      - 'package*.json'
      - 'tsconfig*.json'
      - 'yarn.lock'
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker-entrypoint.sh'
      - 'goss*.yaml'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          check-latest: true
          node-version: '14.x'
      - uses: bahmutov/npm-install@v1
      - run: yarn lint

  build:
    runs-on: ubuntu-latest
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          check-latest: true
          node-version: '14.x'
      - uses: bahmutov/npm-install@v1
      - run: yarn build
      - run: |
          tar -cvf dist.tar dist/
          tar -cvf dist.prod.tar dist/index.js dist/*.production.*.js
      - uses: actions/upload-artifact@v2
        with:
          name: dist.prod
          path: dist.prod.tar
          retention-days: 7
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist.tar
          retention-days: 7

  test:
    needs:
      - build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: ['14.x']
        os: [ubuntu-latest]
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: ./
      - run: |
          tar xf dist.tar
          rm dist.tar
      - name: Use Node v${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          check-latest: true
          node-version: ${{ matrix.node }}

      - uses: bahmutov/npm-install@v1
      - run: yarn test --ci --coverage --maxWorkers=2
      - uses: codecov/codecov-action@v1
        if: ${{ success() }}
        continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.generate.outputs.config }}
      builds: ${{ steps.generate.outputs.builds }}
      manifests: ${{ steps.generate.outputs.manifests }}
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - id: generate
        uses: ./.github/actions/docker/buildConfig
        with:
          repositories: |
            ghcr.io/hertzg/tesseract-server
            hertzg/tesseract-server
          platforms: |
            linux/amd64
            linux/arm64/v8
            linux/arm/v7
            linux/arm/v6

  docker-build:
    needs:
      - docker
      - build
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.docker.outputs.builds) }}
    steps:
      - uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: dist.prod
          path: ./
      - run: |
          tar xf dist.prod.tar
          rm dist.prod.tar
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            DIST_SRC=./dist
          target: prod_copy_dist
          allow: |
            network.host
          platforms: ${{ matrix.platform }}
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: ${{ join(matrix.tags, ',') }}

      - run: docker save ${{ matrix.save.tag }} > ${{ matrix.save.file }}.tar
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.save.file }}
          path: ${{ matrix.save.file }}.tar
          retention-days: 3

      - uses: e1himself/goss-installation-action@v1.0.3
        with:
          version: v0.3.16
      - run: dgoss run ${{ matrix.save.tag }}

      - if: ${{ success() && fromJSON(needs.docker.outputs.config).shouldPush }}
        run: |
          for tag in $TO_PUSH; do
            docker push $tag
          done
        env:
          TO_PUSH: ${{ join(matrix.tags, ' ') }}

  docker-manifest:
    if: ${{ fromJSON(needs.docker.outputs.config).shouldPush }}
    needs:
      - docker
      - docker-build
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.docker.outputs.manifests) }}
    steps:
      - name: ${{ matrix.name }}
        run: |
          echo "Manifest tag=${{ matrix.tag }} images=${{ join(matrix.images, ',') }}"
      - uses: e1himself/goss-installation-action@v1.0.3
        with:
          version: v0.3.16
      - run: dgoss run ${{ matrix.tag }}
