name: CICD
on:
  push:
    branches: []
    tags: 'v*'
    paths:
      - 'src/**/*'
      - 'test/**/*'
      - '.github/action/**/*'
      - '.github/workflows/**/*'
      - 'package*.json'
      - 'tsconfig*.json'
      - 'yarn.lock'
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker-entrypoint.sh'
      - 'goss*.yaml'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          check-latest: true
          node-version: '14.x'
      - uses: bahmutov/npm-install@v1
      - run: yarn lint

  build:
    runs-on: ubuntu-latest
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache
        with:
          path: dist/
          key:
            ${{ runner.os }}-src-${{ hashFiles('src/**', '**/package*.json',
            '**/*.lock', 'tsconfig.json') }}

      - if: ${{ steps.cache.outputs.cache-hit != 'true'}}
        uses: actions/setup-node@v2
        with:
          check-latest: true
          node-version: '14.x'
      - if: ${{ steps.cache.outputs.cache-hit != 'true'}}
        uses: bahmutov/npm-install@v1
      - if: ${{ steps.cache.outputs.cache-hit != 'true'}}
        run: yarn build

      - run: |
          tar -cvf dist.tar dist/
          tar -cvf dist.prod.tar dist/index.js dist/*.production.*.js
      - uses: actions/upload-artifact@v2
        with:
          name: dist.prod
          path: dist.prod.tar
          retention-days: 7
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist.tar
          retention-days: 7

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: ['14.x']
        os: [ubuntu-latest]
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - name: Use Node v${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          check-latest: true
          node-version: ${{ matrix.node }}

      - uses: bahmutov/npm-install@v1
      - run: yarn test --ci --coverage --maxWorkers=2
      - uses: codecov/codecov-action@v1
        if: ${{ success() }}
        continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    outputs:
      builds: ${{ steps.generate.outputs.builds }}
      manifests: ${{ steps.generate.outputs.manifests }}
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - id: generate
        uses: ./.github/actions/docker/buildConfig
        with:
          repositories: |
            ghcr.io/hertzg/tesseract-server
            hertzg/tesseract-server
          platforms: |
            linux/amd64
            linux/arm64/v8
            linux/arm/v7
            linux/arm/v6
          publish-on: |
            version-tag
            master-branch

  docker-build:
    needs:
      - docker
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.docker.outputs.builds) }}
      fail-fast: false
    steps:
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-v2-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-v2-

      # Build the container
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: dist.prod
          path: ./
      - run: |
          tar xf dist.prod.tar
          rm dist.prod.tar
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            DIST_SRC=./dist
          target: prod_copy_dist
          platforms: ${{ matrix.platform }}
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: ${{ matrix.tag }}
      - uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: ${{ matrix.tag }}

  docker-test:
    needs:
      - docker
      - docker-build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.docker.outputs.builds) }}
      fail-fast: false
    steps:
      - uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: ${{ matrix.tag }}
      # Test that container is working
      - uses: e1himself/goss-installation-action@v1.0.3
        with:
          version: v0.3.16
      - run: dgoss run ${{ matrix.tag }}

  docker-dive:
    needs:
      - docker
      - docker-build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.docker.outputs.builds) }}
      fail-fast: false
    steps:
      - if: ${{ matrix.platform == 'linux/amd64' }}
        uses: yuichielectric/dive-action@0.0.4
        with:
          image: ${{ matrix.tag }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  docker-push:
    needs:
      - docker
      - docker-test
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.docker.outputs.builds) }}
      fail-fast: false
    steps:
      - uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-v2-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-v2-
      # Build the container
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: dist.prod
          path: ./
      - run: |
          tar xf dist.prod.tar
          rm dist.prod.tar
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            DIST_SRC=./dist
          target: prod_copy_dist
          platforms: ${{ matrix.platform }}
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: ${{ join(matrix.tags, ',') }}
      - uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: ${{ matrix.tag }}

  docker-multiarch:
    needs:
      - docker
      - docker-push
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.docker.outputs.manifests) }}
      fail-fast: false
    steps:
      - run: |
          docker manifest create ${{ matrix.tag }} ${{ join(matrix.images, ' ') }}
          docker manifest push ${{ matrix.tag }}
